<template>
  <div class="{{FEAT_NAME}}-detail">
    <div v-loading="{{FEAT_NAME_CAMEL}}Store.detailLoading" class="detail-container">
      <!-- 页面头部 -->
      <div class="detail-header">
        <div class="header-left">
          <el-button @click="handleBack">
            <el-icon><ArrowLeft /></el-icon>
            返回列表
          </el-button>
          <h2>{{CHINESE_NAME}}详情</h2>
        </div>

        <div class="header-actions">
          <el-button type="primary" @click="handleEdit">
            <el-icon><Edit /></el-icon>
            编辑
          </el-button>

          <el-dropdown @command="handleDropdownCommand">
            <el-button>
              更多操作
              <el-icon><ArrowDown /></el-icon>
            </el-button>
            <template #dropdown>
              <el-dropdown-menu>
                <el-dropdown-item
                  v-if="{{ENTITY_NAME_LOWER}}?.status !== 'active'"
                  command="activate"
                >
                  激活
                </el-dropdown-item>
                <el-dropdown-item
                  v-if="{{ENTITY_NAME_LOWER}}?.status === 'active'"
                  command="deactivate"
                >
                  停用
                </el-dropdown-item>
                <el-dropdown-item command="delete" divided>
                  删除
                </el-dropdown-item>
              </el-dropdown-menu>
            </template>
          </el-dropdown>
        </div>
      </div>

      <!-- 详情内容 -->
      <div v-if="{{ENTITY_NAME_LOWER}}" class="detail-content">
        <!-- 基本信息卡片 -->
        <el-card class="info-card" header="基本信息">
          <el-descriptions :column="2" border>
            <el-descriptions-item label="{{CHINESE_NAME}}名称">
              {{ {{ENTITY_NAME_LOWER}}.name }}
            </el-descriptions-item>

            <el-descriptions-item label="状态">
              <el-tag
                :type="getStatusTagType({{ENTITY_NAME_LOWER}}.status)"
                size="small"
              >
                {{ getStatusText({{ENTITY_NAME_LOWER}}.status) }}
              </el-tag>
            </el-descriptions-item>

            <el-descriptions-item label="创建时间">
              {{ formatDateTime({{ENTITY_NAME_LOWER}}.createdAt) }}
            </el-descriptions-item>

            <el-descriptions-item label="更新时间">
              {{ formatDateTime({{ENTITY_NAME_LOWER}}.updatedAt) }}
            </el-descriptions-item>

            <el-descriptions-item label="描述" :span="2">
              <div class="description-content">
                {{ {{ENTITY_NAME_LOWER}}.description || '暂无描述' }}
              </div>
            </el-descriptions-item>
          </el-descriptions>
        </el-card>

        <!-- 扩展信息卡片 -->
        <el-card class="info-card" header="扩展信息">
          <el-empty
            description="暂无扩展信息"
            :image-size="100"
          />
        </el-card>

        <!-- 操作日志卡片 -->
        <el-card class="info-card" header="操作日志">
          <el-timeline>
            <el-timeline-item
              v-for="activity in mockActivities"
              :key="activity.id"
              :timestamp="formatDateTime(activity.timestamp)"
              placement="top"
            >
              <el-card>
                <h4>{{ activity.title }}</h4>
                <p>{{ activity.description }}</p>
              </el-card>
            </el-timeline-item>
          </el-timeline>
        </el-card>
      </div>

      <!-- 数据不存在 -->
      <div v-else-if="!{{FEAT_NAME_CAMEL}}Store.detailLoading" class="not-found">
        <el-empty
          description="{{CHINESE_NAME}}不存在或已被删除"
          :image-size="200"
        >
          <el-button type="primary" @click="handleBack">
            返回列表
          </el-button>
        </el-empty>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
/**
 * {{CHINESE_NAME}}详情页面
 * 展示{{CHINESE_NAME}}的详细信息，包括基本信息、扩展信息和操作日志
 *
 * @author AI Generator
 * @date {{CURRENT_DATE}}
 */

import { ref, computed, onMounted } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { ElMessage, ElMessageBox } from 'element-plus'
import { ArrowLeft, Edit, ArrowDown } from '@element-plus/icons-vue'
import { use{{FEAT_NAME_PASCAL}}Store } from '../store/{{FEAT_NAME}}.store'
import { mock{{ENTITY_NAME}}Activities } from '../mocks/{{FEAT_NAME}}.mock'
import type { {{ENTITY_NAME}} } from '../api/{{FEAT_NAME}}.service'

// 路由和状态管理
const route = useRoute()
const router = useRouter()
const {{FEAT_NAME_CAMEL}}Store = use{{FEAT_NAME_PASCAL}}Store()

// 当前{{CHINESE_NAME}}ID
const {{ENTITY_NAME_LOWER}}Id = computed(() => route.params.id as string)

// 当前{{CHINESE_NAME}}数据
const {{ENTITY_NAME_LOWER}} = computed(() => {{FEAT_NAME_CAMEL}}Store.current{{ENTITY_NAME}})

// 模拟活动数据
const mockActivities = ref(mock{{ENTITY_NAME}}Activities.filter(
  activity => activity.{{ENTITY_NAME_LOWER}}Id === {{ENTITY_NAME_LOWER}}Id.value
))

/**
 * 获取状态标签类型
 */
function getStatusTagType(status: {{ENTITY_NAME}}['status']) {
  const typeMap = {
    active: 'success',
    inactive: 'info',
    pending: 'warning'
  }
  return typeMap[status] || 'info'
}

/**
 * 获取状态文本
 */
function getStatusText(status: {{ENTITY_NAME}}['status']) {
  const textMap = {
    active: '活跃',
    inactive: '未激活',
    pending: '待处理'
  }
  return textMap[status] || status
}

/**
 * 格式化日期时间
 */
function formatDateTime(dateTime: string) {
  return new Date(dateTime).toLocaleString('zh-CN')
}

/**
 * 处理返回
 */
function handleBack() {
  router.push('/{{FEAT_NAME}}/list')
}

/**
 * 处理编辑
 */
function handleEdit() {
  router.push(`/{{FEAT_NAME}}/${{{ENTITY_NAME_LOWER}}Id.value}/edit`)
}

/**
 * 处理下拉菜单命令
 */
async function handleDropdownCommand(command: string) {
  if (!{{ENTITY_NAME_LOWER}}.value) return

  switch (command) {
    case 'activate':
      await handleStatusChange('active')
      break
    case 'deactivate':
      await handleStatusChange('inactive')
      break
    case 'delete':
      await handleDelete()
      break
  }
}

/**
 * 处理状态更改
 */
async function handleStatusChange(status: {{ENTITY_NAME}}['status']) {
  if (!{{ENTITY_NAME_LOWER}}.value) return

  try {
    await ElMessageBox.confirm(
      `确定要将{{CHINESE_NAME}}状态更改为"${getStatusText(status)}"吗？`,
      '确认操作',
      {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }
    )

    await {{FEAT_NAME_CAMEL}}Store.update{{ENTITY_NAME}}Status({{ENTITY_NAME_LOWER}}.value.id, status)
    ElMessage.success('状态更新成功')
  } catch (error) {
    if (error !== 'cancel') {
      ElMessage.error('状态更新失败')
    }
  }
}

/**
 * 处理删除
 */
async function handleDelete() {
  if (!{{ENTITY_NAME_LOWER}}.value) return

  try {
    await ElMessageBox.confirm(
      '确定要删除这个{{CHINESE_NAME}}吗？删除后无法恢复。',
      '确认删除',
      {
        confirmButtonText: '确定删除',
        cancelButtonText: '取消',
        type: 'warning'
      }
    )

    await {{FEAT_NAME_CAMEL}}Store.delete{{ENTITY_NAME}}({{ENTITY_NAME_LOWER}}.value.id)
    ElMessage.success('删除成功')

    // 删除成功后返回列表
    handleBack()
  } catch (error) {
    if (error !== 'cancel') {
      ElMessage.error('删除失败')
    }
  }
}

/**
 * 加载{{CHINESE_NAME}}详情
 */
async function load{{ENTITY_NAME}}Detail() {
  try {
    await {{FEAT_NAME_CAMEL}}Store.fetch{{ENTITY_NAME}}Detail({{ENTITY_NAME_LOWER}}Id.value)
  } catch (error) {
    ElMessage.error('加载{{CHINESE_NAME}}详情失败')
  }
}

// 组件挂载时加载数据
onMounted(() => {
  if ({{ENTITY_NAME_LOWER}}Id.value) {
    load{{ENTITY_NAME}}Detail()
  }
})
</script>

<style scoped lang="scss">
.{{FEAT_NAME}}-detail {
  .detail-container {
    min-height: 400px;
  }

  .detail-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 24px;
    padding: 16px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

    .header-left {
      display: flex;
      align-items: center;
      gap: 16px;

      h2 {
        margin: 0;
        font-size: 20px;
        font-weight: 600;
        color: #303133;
      }
    }

    .header-actions {
      display: flex;
      gap: 12px;
    }
  }

  .detail-content {
    .info-card {
      margin-bottom: 24px;

      .description-content {
        line-height: 1.6;
        color: #606266;
        white-space: pre-wrap;
      }
    }
  }

  .not-found {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 400px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
}
</style>
